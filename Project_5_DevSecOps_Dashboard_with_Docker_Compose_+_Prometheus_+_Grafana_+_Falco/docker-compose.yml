version: '3.8'

networks:
  monitoring:
    driver: bridge
  app:
    driver: bridge

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  falco_data:
    driver: local

services:
  # Microservice Application
  app:
    build: ./app
    container_name: demo-app
    ports:
      - "3000:3000"
    networks:
      - app
      - monitoring
    environment:
      - NODE_ENV=production
      - METRICS_ENABLED=true
      - PYTHONUNBUFFERED=1
    volumes:
      - ./app/logs:/app/logs
    restart: unless-stopped
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=3000"
      - "prometheus.path=/metrics"
    depends_on:
      - redis

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3001:3000"
    networks:
      - monitoring
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - monitoring
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    ports:
      - "8080:8080"
    networks:
      - monitoring
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped

  # Falco for runtime security monitoring (WSL compatible)
  falco:
    image: falcosecurity/falco:0.41.3
    container_name: falco
    networks:
      - monitoring
    privileged: true
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - ./falco/falco.yaml:/etc/falco/falco.yaml
      - ./falco/rules:/etc/falco/rules.d
      - falco_data:/var/log/falco
    environment:
      - FALCO_GRPC_ENABLED=false
      - FALCO_K8S_AUDIT_ENABLED=false
      - SKIP_DRIVER_LOADER=true
    command: ["/usr/bin/falco", "-c", "/etc/falco/falco.yaml", "--userspace"]

  # Log aggregator for Falco alerts
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: fluentd
    networks:
      - monitoring
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - falco_data:/var/log/falco:ro
      - ./logs:/var/log/output
    ports:
      - "24224:24224"
    restart: unless-stopped

  # Redis for demo suspicious activity
  redis:
    image: redis:7-alpine
    container_name: redis-demo
    networks:
      - app
    ports:
      - "6379:6379"
    restart: unless-stopped